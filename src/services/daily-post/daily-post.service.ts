// Todo: Remove later
import 'reflect-metadata';
import { Service, Container } from 'typedi';
import * as RandomNumber from 'random-number';
import { ApifyCovidService } from '../third-party/apify-covid/apify-covide.service';
import { CbrService } from '../third-party/cbr/cbr.service';
import { CoinmarketcapService } from '../third-party/coinmarketcap/coinmarketcap.service';
import { GiphyService } from '../third-party/giphy/giphy.service';
import { OpenweathermapService } from '../third-party/openweathermap/openweathermap.service';
import { IRatePhrases } from './interfaces/daily-post.interface';
// import {} from '../third-party/apify-covid/interfaces/covid.interface';
import { IExchangeRates, CurrencySymbol } from '../third-party/cbr/interfaces/currency.interface';
import randomNumber = require('random-number');
// import {} from '../third-party/coinmarketcap/interfaces/cryptocurrency.interface';
// import {} from '../third-party/giphy/interfaces/respopnse.interfaces';
// import {} from '../third-party/openweathermap/interfaces/weather.interface';
// import {} from '../third-party/rbk-rss/'

// @Service()
export class DailyPostService {
    /**
     * Covid monitoring service
     */
    private readonly apifyCovidService: ApifyCovidService;
    /**
     * Currency rates from Cental bank of Russia service
     */
    private readonly cbrService: CbrService;
    /**
     * Cryptocurrency rate's service
     */
    private readonly coinmarketcapService: CoinmarketcapService;
    /**
     * Gif files service
     */
    private readonly giphyService: GiphyService;
    /**
     * Weather service
     */
    private readonly openweathermapService: OpenweathermapService;
    /** 
     * Currency symbols to display
     */
    private readonly currencySymbols: CurrencySymbol[] = [
        'USD',
        'EUR',
    ]; 
    /** 
     * Percentage of likelihood to say a random phrases
     * The value can be from 0 to 100
     * The higher the value, the less chance of a random phrase
     */
    private readonly randomness = 70;
    /**
     * Comments for currency exchange rates
     */
    private readonly currencyRateDict: IRatePhrases = {
        up: {
            default: '—Ä–∞—Å—Ç–µ—Ç —Å—É–∫–∞',
            random: [
                '—É–ª–µ—Ç–∞–µ—Ç –≤ –∫–æ—Å–º–æ—Å',
                '–æ–ø—è—Ç—å —Ü–µ–Ω—ã –≤—ã—Ä–∞—Å—Ç—É—Ç',
                '–ø–∏–∑–¥–∞ –±–µ–Ω–∑–∏–Ω—É',
                '–æ–≥–æ–Ω–∏—è —Ä—É–±–ª—è',
                '—Ö—É–π, –∞ –Ω–µ –∫–∞—Ä—Ç–æ—à–∫–∞ –ø–æ 25 —Ä—É–±–ª–µ–π'
            ],
        },
        down: {
            default: '–ø–∞–¥–∞–µ—Ç –±–ª—è—Ç—å',
            random: [
                '–∏–¥–µ—Ç –Ω–∞ –¥–Ω–æ',
                '–ø—Ä–æ–±–∏–≤–∞–µ—Ç –¥–Ω–∏—â–µ',
                '—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∏–∂–µ –Ω–∏–∑–∫–æ–≥–æ',
                '–±—É–¥–µ–º –æ–ø–ª–∞–∫–∏–≤–∞—Ç—å',
                '—Ö—É–µ–≤–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ',
                '–Ω–∞–¥–æ –±—ã–ª–æ –≤–∞–ª—é—Ç–Ω—É—é –∏–ø–æ—Ç–µ–∫—É –±—Ä–∞—Ç—å',
            ],
        }
    };
    /**
     * Comments for cryptocurrency exchange rates
     */
    private readonly cryptocurrencyRateDict: IRatePhrases = {
        up: {
            default: '—Ä–∞—Å—Ç–µ—Ç —Å—É–∫–∞',
            random: [
                '–±–ª—è –Ω–∞–¥–æ –±—ã–ª–æ –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è',
                '–ø–∞—Ü–∞–Ω—ã —Ç–∞—Ä–∏–º –∫—Ä–∏–ø—Ç—É',
                '–∂–∞–ª—å –Ω–µ –º–∞–π–Ω–∏–ª –∫—Ä–∏–ø—Ç—É'
            ]
        },
        down: {
            default: '–ø–∞–¥–∞–µ—Ç –±–ª—è—Ç—å',
            random: [
                '–∑–∞–ª—É–ø–∞ —ç—Ç–∞ –∫—Ä–∏–ø—Ç–∞',
                '—á–∏—Å—Ç–æ –ø–∏—Ä–∞–º–∏–¥–∞ –µ–±–∞–Ω–∞—è',
            ],
        }
    }

    constructor() {
        /** Init services */
        // this.apifyCovidService = Container.get(ApifyCovidService);
        this.cbrService = Container.get(CbrService);
        // this.coinmarketcapService = Container.get(CoinmarketcapService);
        // this.giphyService = Container.get(GiphyService);
        // this.openweathermapService = Container.get(OpenweathermapService);
    }

    /**
     * Generate complete daily post with different informations
     * @returns information post in string
     */
    public async generateDailyPost(): Promise<string> {
        /**
         * Preparing a block of exchange rates
         */
        let currencyRaw: IExchangeRates = undefined;
        currencyRaw = await this.cbrService.getDayChangesRate([]);

        let currency: string = undefined;
        if (currencyRaw) {
            currency = this.decorateCurencyExchangeRate(currencyRaw);
        }

        console.log(currency)

        /**
         * Preparing a block of yesterday news
         */
        let newsRaw = undefined;
        //newsRaw = await this.


        /** Combine information blocks into one */
        let dailyPost = '';
        dailyPost.concat(currency);

        return dailyPost;
    }

    private decorateCurencyExchangeRate(exchangeRates: IExchangeRates): string {
        /**
         * Work with dollar
         */
        if (!exchangeRates) return undefined;
        const usdRate = exchangeRates?.today?.USD;
        const usdDifference = exchangeRates?.difference?.USD;

        /** Add signt for positive number */
        let usdDifferenceSign: number | string = usdDifference;
        if (usdDifference > 0) usdDifferenceSign = '+' + usdDifference;

        /** Get random phrase fro USD */
        let usdPhrase: string = undefined;
        if (usdDifference > 0) {
            usdPhrase = this.getRandomPhrase(this.currencyRateDict, 'up');
        } else {
            usdPhrase = this.getRandomPhrase(this.currencyRateDict, 'down');
        }

        /**
         * Work with euro
         */
        const eurRate = exchangeRates?.today?.EUR;
        const eurDifference = exchangeRates?.difference?.EUR;

        /** Add signt for positive number */
        let eurDifferenceSign: number | string = eurDifference;
        if (usdDifference > 0) eurDifferenceSign = '+' + eurDifference;

        let eurPhrase: string = undefined;
        if (eurDifference > 0) {
            eurPhrase = this.getRandomPhrase(this.currencyRateDict, 'up');
        } else {
            eurPhrase = this.getRandomPhrase(this.currencyRateDict, 'down');
        }

        return `
            üíµ USD: ${ usdRate } (${ usdDifferenceSign }) ${ usdPhrase }
            üí∂ EUR: ${ eurRate } (${ eurDifferenceSign }) ${ eurPhrase }
        `;
    }

    private decorateYesterdayMainNews(): string {
        return `
            üì∞ –í–∞–∂–Ω–æ–µ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å:
            - –í –ú–ò–î–µ –ø–æ–æ–±–µ—â–∞–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–∞–Ω–∫—Ü–∏–∏ –ï–° –ø–æ –¥–µ–ª—É –ù–∞–≤–∞–ª—å–Ω–æ–≥–æ
            - –í–æ–ª–æ–Ω—Ç–µ—Ä —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∞ –æ –±–æ–ª–µ–∑–Ω–∏ —ç–∫—Å-—É—á–∞—Å—Ç–Ω–∏—Ü—ã Little Big
            - –§–∏–Ω–ª—è–Ω–¥–∏—è –≤–≤–µ–ª–∞ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑-–∑–∞ —Ä–æ—Å—Ç–∞ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏ COVID
        `;
    }
    private decorateCryptocurrencyExcahangeRates(): string {
        return `
            üí≥ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:
            BTC: 5000 —Ä—É–± (+200$) –ø–∞–¥–∞–µ—Ç –±–ª—è—Ç—å
            ETH: 4000 —Ä—É–± (-10$) —Ä–∞—Å—Ç–µ—Ç —Å—É–∫–∞
        `;
    }

    private decorateCovidStatistics(): string {
        return `
            –ö–æ—Ä–æ–Ω–æ–≤–∏—Ä—É—Å:
            ü§¢ 134 000 —á–µ–ª (+900)
            ‚ö∞Ô∏è 27 000 —á–µ–ª (+17)
        `;
    }

    private decorateWeather(): string{
        return `
            –ü–æ–≥–æ–¥–∞:
            üå§ –ú–°–ö -4, –ø–æ—Ä—è–¥–æ—á–Ω–æ
            üå® –ù–°–ö - 17, —Ö–æ–ª–æ–¥–Ω–æ –±–ª—è—Ç—å
        `;
    }

    private getRandomPhrase(dictonary: IRatePhrases, direction: 'up' | 'down'): string{
        const chance = RandomNumber.generator({
            min: 0,
            max: 100,
            integer: true,
        })()

        if (chance > (100 - this.randomness)) {
            const randomPhraseIndex = RandomNumber.generator({
                min: 0,
                max: dictonary[direction]?.random?.length -1,
                integer: true,
            })()

            return dictonary[direction]?.random[randomPhraseIndex];
        }

        return dictonary[direction]?.default;
    }
}
